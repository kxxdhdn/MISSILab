#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

matplotlib applications

"""

from astropy import units as u
import numpy as np
import matplotlib.pyplot as plt
from utils.myfunc import celest2deg, fclean
from utils.rwfits import *
from utils.rwcsv import *
from utils.impro import *
from utils.mapping import *
from utils.mc import calunc
from smooth import crop3D, choker, do_conv

chnl = ['SL2', 'SL1', 'LL2', 'LL1']

data_path = 'data/m82/'
out_path = data_path+'convolved/'
rpj_path = data_path+'reprojection/'
ref_file = 'data/m82/m82_SL2'

N_mc = 1

## read reprojection reference
hdREF = read_fits(ref_file, wvl_mod=1)[1]
dx = hdREF['NAXIS1']
dy = hdREF['NAXIS2']

wvl0 = []
cube0 = []
unc0 = []
for i, c in enumerate(chnl):
	
	data_filename = 'm82_'+c
	unc_filename = data_filename+'_unc'

	ra, dec = celest2deg(9., 55., 52.5, 69., 40., 47.)
	dx, dy = 50, 50
	SList, wvl, hdr = crop3D(data_path+data_filename, out_path+data_filename, \
		None, (ra, dec), (dx, dy))[1:4]
	NAXIS1 = hdr['NAXIS1']
	NAXIS2 = hdr['NAXIS2']
	NAXIS3 = np.size(wvl)

	## smooth
	choker(SList, wvl)
	do_conv()

	## rebuild convolved cube
	data3d = []
	for SLout in SList:
		data = read_fits(SLout+'conv', False)[0]
		data3d.append(data)
	data3d = np.array(data3da)
	write_fits(out_path+data_filename+'_conv', data3d, hdr, wvl=wvl)

	## reprojection
	cube = []
	for k in range(NAXIS3):
		reproj, ft, w = rpj(out_path+data_filename+'_conv', \
			rpj_path+data_filename, ref_file, (dy, dx), write=0)
		cube.append(reproj)
	cube = np.array(cube)

	"""
	----------------------------------------
	Uncertainty propagation by Monte-Carlo
	----------------------------------------

	"""
	hypercube=[]
	b0 = input("(Re)do Monte-Carlo? [y/n] ")
	for j in range(N_mc):
		if b0=='y':
			crop3D(data_path+data_filename, out_path+data_filename, \
				data_path+unc_filename, (ra, dec), (dx, dy))
			
			## smooth
			choker(SList, wvl)
			do_conv()
			
			## ieme iteration finished
			print("----------------{}----------------".format(j+1))

		## rebuild convolved cube
		data3d = []
		for SLout in SList:
			data = read_fits(SLout+'conv', False)[0]
			data3d.append(data)
		data3d = np.array(data3d)
		write_fits(out_path+data_filename+'_conv_'+str(j), data3d, hdr, wvl)

		## reprojection
		cubi = []
		for k in range(NAXIS3):
			reproj, ft, w = rpj(out_path+data_filename+'_conv', \
				rpj_path+data_filename, ref_file, (dy, dx), write=0)
			cubi.append(reproj)
		cubi = np.array(cubi)

		## append hypercube
		hypercube.append(cubi)
	hypercube = np.array(hypercube)

	## calculate MC uncertainty
	unc = calunc(hypercube, [NAXIS1, NAXIS2, NAXIS3])

	fclean(data_path+'convolved/*.fits')

	## extend wvl
	for k, lam in enumerate(wvl):
		if wvl0[-1]>lam:
			del wvl0[-1], cube0[-1,:,:], unc0[-1,:,:]
		else:
			wvl0.extend(wvl[k+1:])
			cube0.extend(cube[k+1:,:,:])
			unc0.extend(unc[k+1:,:,:])
			wvl0 = np.array(wvl0)
			cube0 = np.array(cube0)
			unc0 = np.array(unc0)
			print("{} edge wvl deleted.".format(k*2))
			break



